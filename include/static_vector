/*
	This file is part of Fennix Kernel.

	Fennix Kernel is free software: you can redistribute it and/or
	modify it under the terms of the GNU General Public License as
	published by the Free Software Foundation, either version 3 of
	the License, or (at your option) any later version.

	Fennix Kernel is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Fennix Kernel. If not, see <https://www.gnu.org/licenses/>.
*/

#include <initializer_list>
#include <cassert>
#include <cstddef>

template <typename T, std::size_t N>
class static_vector
{
private:
	T m_data[N];
	std::size_t m_size;

public:
	constexpr static_vector() : m_size(0) {}

	constexpr static_vector(std::initializer_list<T> list) : m_size(0)
	{
		for (const T &value : list)
		{
			assert(m_size < N);
			m_data[m_size++] = value;
		}
	}

	constexpr T &operator[](std::size_t index) { return m_data[index]; }
	constexpr const T &operator[](std::size_t index) const { return m_data[index]; }
	constexpr std::size_t size() const { return m_size; }
};
