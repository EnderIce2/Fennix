/*
	This file is part of Fennix Kernel.

	Fennix Kernel is free software: you can redistribute it and/or
	modify it under the terms of the GNU General Public License as
	published by the Free Software Foundation, either version 3 of
	the License, or (at your option) any later version.

	Fennix Kernel is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Fennix Kernel. If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once

#include <types.h>

namespace std
{
	class exception
	{
	public:
		exception() noexcept {}
		exception(const exception &) noexcept = default;
		virtual ~exception() noexcept = default;
		exception &operator=(const exception &) noexcept = default;
		virtual const char *what() const noexcept { return "Exception"; }
	};

	typedef void (*terminate_handler)();
	typedef void (*unexpected_handler)();

	[[noreturn]] void terminate() noexcept;
	terminate_handler set_terminate(terminate_handler f) noexcept;
	terminate_handler get_terminate() noexcept;

	[[noreturn]] void unexpected();
	unexpected_handler set_unexpected(unexpected_handler f) noexcept;
	unexpected_handler get_unexpected() noexcept;

	using exception_ptr = uintptr_t;

	template <class E>
	std::exception_ptr make_exception_ptr(E e) noexcept;
}
