/*
	This file is part of Fennix Kernel.

	Fennix Kernel is free software: you can redistribute it and/or
	modify it under the terms of the GNU General Public License as
	published by the Free Software Foundation, either version 3 of
	the License, or (at your option) any later version.

	Fennix Kernel is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Fennix Kernel. If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once

namespace std
{
	struct input_iterator_tag
	{
	};

	struct output_iterator_tag
	{
	};

	struct forward_iterator_tag : public input_iterator_tag
	{
	};

	struct bidirectional_iterator_tag : public forward_iterator_tag
	{
	};

	struct random_access_iterator_tag : public bidirectional_iterator_tag
	{
	};

	struct contiguous_iterator_tag : public random_access_iterator_tag
	{
	};

	template <class Iter>
	struct iterator_traits
	{
	public:
		using difference_type = typename Iter::difference_type;
		using value_type = typename Iter::value_type;
		using pointer = typename Iter::pointer;
		using reference = typename Iter::reference;
		using iterator_category = typename Iter::iterator_category;
	};

	template <class InputIt>
	constexpr typename std::iterator_traits<InputIt>::difference_type __do_distance(InputIt first, InputIt last, std::input_iterator_tag)
	{
		typename std::iterator_traits<InputIt>::difference_type result = 0;
		while (first != last)
		{
			++first;
			++result;
		}
		return result;
	}

	template <class InputIt>
	constexpr typename std::iterator_traits<InputIt>::difference_type __do_distance(InputIt first, InputIt last, std::random_access_iterator_tag)
	{
		return last - first;
	}

	template <class InputIt>
	constexpr typename std::iterator_traits<InputIt>::difference_type distance(InputIt first, InputIt last)
	{
		return __do_distance(first, last, typename std::iterator_traits<InputIt>::iterator_category());
	}

	template <class InputIt>
	void __do_advance(InputIt &it, typename std::iterator_traits<InputIt>::difference_type n, std::input_iterator_tag)
	{
		while (n > 0)
		{
			--n;
			++it;
		}
	}

	template <class InputIt>
	void __do_advance(InputIt &it, typename std::iterator_traits<InputIt>::difference_type n, std::bidirectional_iterator_tag)
	{
		while (n > 0)
		{
			--n;
			++it;
		}
		while (n < 0)
		{
			++n;
			--it;
		}
	}

	template <class InputIt>
	void __do_advance(InputIt &it, typename std::iterator_traits<InputIt>::difference_type n, std::random_access_iterator_tag)
	{
		it += n;
	}

	template <class InputIt, class Distance>
	constexpr void advance(InputIt &it, Distance n)
	{
		__do_advance(it, typename std::iterator_traits<InputIt>::difference_type(n),
					 typename std::iterator_traits<InputIt>::iterator_category());
	}

	template <class BidirIt>
	constexpr BidirIt prev(BidirIt it, typename std::iterator_traits<BidirIt>::difference_type n = 1)
	{
		std::advance(it, -n);
		return it;
	}

	template <class InputIt>
	constexpr InputIt next(InputIt it, typename std::iterator_traits<InputIt>::difference_type n = 1)
	{
		std::advance(it, n);
		return it;
	}

	struct default_sentinel_t
	{
	};

	inline constexpr default_sentinel_t default_sentinel{};
}
