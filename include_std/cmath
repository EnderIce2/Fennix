/*
	This file is part of Fennix Kernel.

	Fennix Kernel is free software: you can redistribute it and/or
	modify it under the terms of the GNU General Public License as
	published by the Free Software Foundation, either version 3 of
	the License, or (at your option) any later version.

	Fennix Kernel is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Fennix Kernel. If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once

namespace std
{
	double sin(double x)
	{
		const int NUM_TERMS = 10;

		double result = 0.0;
		double term = x;

		for (int i = 1; i <= NUM_TERMS; ++i)
		{
			result += term;
			term *= -x * x / ((2 * i) * (2 * i + 1));
		}

		return result;
	}

	float powf(float base, float exp)
	{
		float result = 1.0;
		for (int i = 0; i < (int)exp; ++i)
			result *= base;
		return result;
	}

	double pow(double base, double exp)
	{
		double result = 1.0;
		for (int i = 0; i < (int)exp; ++i)
			result *= base;
		return result;
	}

	long double powl(long double base, long double exp)
	{
		long double result = 1.0;
		for (long i = 0; i < (long)exp; ++i)
			result *= base;
		return result;
	}

	float fabsf(float num)
	{
		if (num < 0)
			return -num;
		return num;
	}

	double fabs(double num)
	{
		if (num < 0)
			return -num;
		return num;
	}

	long double fabsl(long double num)
	{
		if (num < 0)
			return -num;
		return num;
	}
}
