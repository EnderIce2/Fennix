/*
	This file is part of Fennix Kernel.

	Fennix Kernel is free software: you can redistribute it and/or
	modify it under the terms of the GNU General Public License as
	published by the Free Software Foundation, either version 3 of
	the License, or (at your option) any later version.

	Fennix Kernel is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Fennix Kernel. If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once

#include <cstddef>

namespace std
{
	template <typename _E>
	class initializer_list
	{
	public:
		typedef _E value_type;
		typedef const _E &reference;
		typedef const _E &const_reference;
		typedef size_t size_type;
		typedef const _E *iterator;
		typedef const _E *const_iterator;

	private:
		iterator array;
		size_type len;

	public:
		constexpr initializer_list(const_iterator a, size_type l)
			: array(a), len(l) {}

		constexpr initializer_list()
			: array(nullptr), len(0) {}

		constexpr size_type size() const { return len; }
		constexpr const_iterator begin() const { return array; }
		constexpr const_iterator end() const { return begin() + size(); }
	};

	template <class E>
	constexpr const E *begin(initializer_list<E> il)
	{
		return il.begin();
	}

	template <class E>
	constexpr const E *end(initializer_list<E> il)
	{
		return il.end();
	}
}
